## 미로찾기문제
#  N×M크기의 배열로 표현되는 미로가 있다.
#  미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다.
#  이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 
#  한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.
#  위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.
# 첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.
from collections import deque
n, m = 4,6 #map(int, input().split())
dx = [-1,1,0,0] #좌우
dy = [0,0,-1,1] #상하
miro = [[1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]]#[list(map(int, input())) for i in range(n)] #n= 줄
#처음위치 1,1
print(miro)
def bfs(x,y):
    result=0
    q = deque()
    q.append((x,y))

    while q:
        x,y = q.popleft()
        #print(x,y)
        for way in range(4):
            ii,jj = dx[way]+x, dy[way]+y
            if ii<0 or ii >=n or jj <0 or jj>=m:
                continue
            if miro[ii][jj]==0: ## 확인 결과 길이 아닐떄 무시
                continue
            if miro[ii][jj]==1:
                miro[ii][jj] = miro[x][y] + 1
                q.append((ii,jj))
                
    return miro[n-1][m-1]

print('미로찾기답=',bfs(0,0))
