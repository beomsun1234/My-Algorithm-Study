## 외판원 순희

# 외판원 순회 문제는 영어로 Traveling Salesman problem (TSP) 라고 불리는 문제로 computer science 분야에서 가장 중요하게 취급되는 문제 중 하나이다. 여러 가지 변종 문제가 있으나, 여기서는 가장 일반적인 형태의 문제를 살펴보자.
# 1번부터 N번까지 번호가 매겨져 있는 도시들이 있고, 도시들 사이에는 길이 있다. (길이 없을 수도 있다) 이제 한 외판원이 어느 한 도시에서 출발해 N개의 도시를 모두 거쳐 다시 원래의 도시로 돌아오는 순회 여행 경로를 계획하려고 한다. 단, 한 번 갔던 도시로는 다시 갈 수 없다. (맨 마지막에 여행을 출발했던 도시로 돌아오는 것은 예외) 이런 여행 경로는 여러 가지가 있을 수 있는데, 가장 적은 비용을 들이는 여행 계획을 세우고자 한다.
#각 도시간에 이동하는데 드는 비용은 행렬 W[i][j]형태로 주어진다. W[i][j]는 도시 i에서 도시 j로 가기 위한 비용을 나타낸다. 비용은 대칭적이지 않다. 즉, W[i][j] 는 W[j][i]와 다를 수 있다. 모든 도시간의 비용은 양의 정수이다. W[i][i]는 항상 0이다. 경우에 따라서 도시 i에서 도시 j로 갈 수 없는 경우도 있으며 이럴 경우 W[i][j]=0이라고 하자.

#N과 비용 행렬이 주어졌을 때, 가장 적은 비용을 들이는 외판원의 순회 여행 경로를 구하는 프로그램을 작성하시오.


## ----틀린코드(시간초과) 하지만 정답처리됨 not city[cur][i]==0 이부분 추가히니 정답처리됨

import sys
input = sys.stdin.readline
N = int(input())
city = [list(map(int,input().split())) for i in range(N)]
visted = [False]*(N)
print(city)
tmp=[]
_min = sys.maxsize
def solve(start,cur,cost): 
    global _min
    if  start ==cur and visted.count(False)==0: ## 다시 시작점으로 돌아올경우
        print('다찾음')
        print('depth= ',start+1, '현재위치', cur+1)
        print('도시순서=',tmp,'      비용=',cost)
        print(tmp)
        _min = min(_min,cost)
        print(_min)
        return 1        # 종료
    for i in range(N):
        if not city[cur][i]==0 and visted[i]== False:
            if _min <cost:
                continue
            visted[i]=True
            print('지금 도시=',cur+1,'     다음도시=',i+1)
            ret=cost+city[cur][i]
            print('현재 비용=',cost,'  다음도시로비용=', ret)
            print('depth=',start)
            tmp.append(i+1)
            solve(start,i,ret)
            visted[i]=False
            tmp.pop()

    # 각각의 점(도시)에서 시작하는 경우 ex)0,0은 첫번째 도시  1,1 두번쨰 도시
    # 

for i in range(N):
    tmp.append(i+1)
    solve(i,i,0)
    tmp.pop()
print(_min)
